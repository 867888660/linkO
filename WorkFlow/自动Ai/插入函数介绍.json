{"nodes":[{"id":"DeepSeek.py_1748349147004","name":"wenxin-4cc.py","label":"DeepSeek0","x":871.6875,"y":256.5738644897938,"NodeKind":"LLm","Inputs":[{"Context":"import json\nimport re\nimport http.client\nimport base64\nfrom openai import OpenAI\nimport unicodedata\n#**Define the number of outputs and inputs\nOutPutNum = 1\nInPutNum = 0\nFunctionIntroduction='\u7ec4\u4ef6\u529f\u80fd\uff08\u7b80\u8ff0\u4ee3\u7801\u6574\u4f53\u529f\u80fd\uff09\\\\n\u8fd9\u662f\u4e00\u4e2a\u8c03\u7528DeepSeek\u5927\u8bed\u8a00\u6a21\u578bAPI\u7684\u8282\u70b9\u7ec4\u4ef6\uff0c\u652f\u6301\u6587\u672c\u548c\u56fe\u50cf\u6df7\u5408\u8f93\u5165\uff0c\u53ef\u914d\u7f6e\u591a\u79cd\u6a21\u578b\u53c2\u6570\uff0c\u5e76\u63d0\u4f9b\u7075\u6d3b\u7684\u8f93\u51fa\u683c\u5f0f\u9009\u62e9\u3002\\\\n\\\\n\u4ee3\u7801\u529f\u80fd\u6458\u8981\uff08\u6982\u62ec\u6838\u5fc3\u7b97\u6cd5\u6216\u4e3b\u8981\u5904\u7406\u6b65\u9aa4\uff09\\\\n\u6838\u5fc3\u529f\u80fd\u5305\u62ec\u56fe\u50cfBase64\u7f16\u7801\u8f6c\u6362\u3001\u591a\u6a21\u6001\u6d88\u606f\u6784\u5efa\u3001DeepSeek API\u8c03\u7528\u3001\u54cd\u5e94\u5185\u5bb9\u89e3\u6790\u548cJSON\u683c\u5f0f\u5316\u5904\u7406\uff0c\u652f\u6301\u539f\u59cb\u6587\u672c\u548c\u7ed3\u6784\u5316JSON\u4e24\u79cd\u8f93\u51fa\u6a21\u5f0f\u3002\\\\n\\\\n\u53c2\u6570\\\\n```yaml\\\\ninputs:\\\\n  - name: SystemPrompt\\\\n    type: string\\\\n    required: true\\\\n    description: \u7cfb\u7edf\u63d0\u793a\u8bcd\uff0c\u5b9a\u4e49\u6a21\u578b\u7684\u89d2\u8272\u548c\u884c\u4e3a\u89c4\u8303\\\\n  - name: ExportPrompt\\\\n    type: string\\\\n    required: true\\\\n    description: \u7528\u6237\u8f93\u5165\u7684\u4e3b\u8981\u95ee\u9898\u6216\u6307\u4ee4\\\\n  - name: ExprotAfterPrompt\\\\n    type: string\\\\n    required: false\\\\n    description: \u8865\u5145\u63d0\u793a\u8bcd\uff0c\u5728\u7cfb\u7edf\u63d0\u793a\u540e\u8ffd\u52a0\u7684\u6307\u4ee4\\\\n  - name: OriginalTextSelector\\\\n    type: string\\\\n    required: true\\\\n    description: \u8f93\u51fa\u683c\u5f0f\u9009\u62e9\u5668\uff0c\u53ef\u9009\u503c\u4e3aOriginalText\u6216Json\\\\n    default: OriginalText\\\\n  - name: temperature\\\\n    type: number\\\\n    required: false\\\\n    description: \u63a7\u5236\u8f93\u51fa\u968f\u673a\u6027\u7684\u6e29\u5ea6\u53c2\u6570\\\\n    default: 0.7\\\\n  - name: max_tokens\\\\n    type: integer\\\\n    required: false\\\\n    description: \u6700\u5927\u8f93\u51fatoken\u6570\uff0c\u4e0a\u9650\u4e3a8192\\\\n    default: 1024\\\\n  - name: Top_p\\\\n    type: number\\\\n    required: false\\\\n    description: \u6838\u91c7\u6837\u53c2\u6570\uff0c\u63a7\u5236\u8bcd\u6c47\u9009\u62e9\u8303\u56f4\\\\n    default: 0.9\\\\n  - name: frequency_penalty\\\\n    type: number\\\\n    required: false\\\\n    description: \u9891\u7387\u60e9\u7f5a\u53c2\u6570\uff0c\u51cf\u5c11\u91cd\u590d\u5185\u5bb9\\\\n    default: 0.0\\\\n  - name: presence_penalty\\\\n    type: number\\\\n    required: false\\\\n    description: \u5b58\u5728\u60e9\u7f5a\u53c2\u6570\uff0c\u9f13\u52b1\u8bdd\u9898\u591a\u6837\u6027\\\\n    default: 0.0\\\\noutputs:\\\\n  - name: OutPut1\\\\n    type: string\\\\n    description: \u6a21\u578b\u56de\u590d\u5185\u5bb9\u53catoken\u4f7f\u7528\u7edf\u8ba1\u4fe1\u606f\\\\n```\\\\n\\\\n\u8fd0\u884c\u903b\u8f91\uff08\u7528 - \u5217\u8868\u63cf\u5199\u8be6\u7ec6\u6d41\u7a0b\uff09\\\\n- \u521d\u59cb\u5316\u8f93\u51fa\u6570\u7ec4\uff0c\u6e05\u7a7a\u5e76\u91cd\u65b0\u586b\u5145\u8282\u70b9\u7684\u8f93\u51fa\u914d\u7f6e\\\\n- \u904d\u5386\u8f93\u5165\u8282\u70b9\uff0c\u68c0\u6d4b\u6587\u4ef6\u8def\u5f84\u7c7b\u578b\u7684\u8f93\u5165\uff0c\u5c06\u56fe\u50cf\u6587\u4ef6\u8f6c\u6362\u4e3aBase64\u7f16\u7801\u683c\u5f0f\\\\n- \u6839\u636eOriginalTextSelector\u53c2\u6570\u6784\u5efa\u7cfb\u7edf\u63d0\u793a\u8bcd\uff0c\u9009\u62e9\u662f\u5426\u5305\u542bExprotAfterPrompt\\\\n- \u6784\u5efa\u6d88\u606f\u6570\u7ec4\uff0c\u5305\u542b\u7cfb\u7edf\u89d2\u8272\u548c\u7528\u6237\u89d2\u8272\u7684\u6587\u672c\u5185\u5bb9\\\\n- \u5c06Base64\u7f16\u7801\u7684\u56fe\u50cf\u6dfb\u52a0\u5230\u6d88\u606f\u6570\u7ec4\u4e2d\uff0c\u652f\u6301\u591a\u6a21\u6001\u8f93\u5165\\\\n- \u521d\u59cb\u5316OpenAI\u5ba2\u6237\u7aef\uff0c\u914d\u7f6eDeepSeek API\u7684\u5bc6\u94a5\u548c\u57fa\u7840URL\\\\n- \u68c0\u67e5max_tokens\u53c2\u6570\uff0c\u786e\u4fdd\u4e0d\u8d85\u8fc78192\u7684\u4e0a\u9650\\\\n- \u8c03\u7528DeepSeek API\u53d1\u9001\u804a\u5929\u5b8c\u6210\u8bf7\u6c42\uff0c\u4f20\u5165\u6240\u6709\u914d\u7f6e\u53c2\u6570\\\\n- \u63d0\u53d6API\u54cd\u5e94\u4e2d\u7684\u6587\u672c\u5185\u5bb9\\\\n- \u5982\u679c\u8f93\u51fa\u683c\u5f0f\u9009\u62e9\u4e3aJson\uff0c\u5219\u8fdb\u884cJSON\u89e3\u6790\u548c\u683c\u5f0f\u5316\u5904\u7406\\\\n- \u4f7f\u7528\u591a\u5c42\u6e05\u7406\u51fd\u6570\u5904\u7406\u54cd\u5e94\u6587\u672c\uff1a\u53bb\u9664\u4ee3\u7801\u5757\u6807\u8bb0\u3001\u63d0\u53d6JSON\u533a\u57df\u3001\u8f6c\u4e49\u6362\u884c\u7b26\u3001\u6e05\u7406\u63a7\u5236\u5b57\u7b26\\\\n- \u6839\u636e\u8f93\u51fa\u683c\u5f0f\u5206\u914d\u7ed3\u679c\u5230\u5bf9\u5e94\u7684\u8f93\u51fa\u8282\u70b9\uff1aJson\u6a21\u5f0f\u6309\u952e\u503c\u5bf9\u5206\u914d\uff0c\u539f\u59cb\u6587\u672c\u6a21\u5f0f\u76f4\u63a5\u8d4b\u503c\\\\n- \u8bb0\u5f55token\u4f7f\u7528\u7edf\u8ba1\u4fe1\u606f\uff0c\u5305\u62ec\u63d0\u793a\u8bcdtoken\u6570\u3001\u5b8c\u6210token\u6570\u548c\u603btoken\u6570\\\\n- \u8fd4\u56de\u5904\u7406\u5b8c\u6210\u7684\u8f93\u51fa\u6570\u7ec4\uff0c\u5305\u542b\u9519\u8bef\u5904\u7406\u673a\u5236'\n#**Define the number of outputs and inputs\n\n#**Initialize Outputs and Inputs arrays and assign names directly\nOutputs = [{'Num': None, 'Kind': None,'Boolean':False, 'Id': f'Output{i + 1}', 'Context': None,'name':f'OutPut{i + 1}','Link':0,'Description':'answer'} for i in range(OutPutNum)]\nInputs = [{'Num': None, 'Kind': None, 'Id': f'Input{i + 1}', 'Context': None, 'Isnecessary': True,'name':f'Input{i + 1}','Link':0,'IsLabel':False} for i in range(InPutNum)]\n#**Initialize Outputs and Inputs arrays and assign names directly\nNodeKind = 'LLm'\nLable = [{'Id': 'Label1', 'Kind': 'None'}]\n\n#**Assign properties to Inputs\n\nfor output in Outputs:\n    output['Kind'] = 'String'\n\nfor input in Inputs:\n    input['Kind'] = 'String'\n#**Assign properties to Inputs\n\ndef image_to_base64(image_path):\n    with open(image_path, \"rb\") as image_file:\n        encoded_image = base64.b64encode(image_file.read())\n        return encoded_image.decode('utf-8')\n\ndef run_node(node):\n    Outputs.clear()\n    for i in range(len(node['Outputs'])):\n        Outputs.append(node['Outputs'][i])\n    \n    TempArray = []\n    for i in range(len(node['Inputs'])):\n        print('Test 2', node['Inputs'][i]['Kind'])\n        if 'FilePath' in node['Inputs'][i]['Kind']:\n            # Convert image file to Base64 and add to TempArray\n            TempArray.append(image_to_base64(node['Inputs'][i]['Context']))\n    \n    systemPrompt = f\"{node['SystemPrompt']}\\n{node['ExprotAfterPrompt']}\"\n    if node['OriginalTextSelector'] == 'OriginalText': \n        systemPrompt = node['SystemPrompt'] \n    messages = [\n        {\n            \"role\": \"system\",\n            \"content\": systemPrompt\n            # \u5982\u679c ExprotAfterPrompt \u53ea\u662f\u7ed9\u6a21\u578b\u7684\u8865\u5145\u6307\u4ee4\uff0c\u653e\u5728 system \u91cc\u5373\u53ef\uff1b\n            # \u82e5\u5b83\u662f\u8981\u5728\u751f\u6210\u540e\u8ffd\u52a0\u5230\u7b54\u6848\u91cc\u7684\u6a21\u677f\uff0c\u5219\u4e0d\u5e94\u8be5\u5199\u8fdb\u63d0\u793a\uff0c\u800c\u662f\u5728\u5916\u90e8\u62fc\u63a5\u3002\n        },\n        {\n            \"role\": \"user\",\n            \"content\": node['ExportPrompt']          # \u53ea\u653e\u771f\u6b63\u7684\u7528\u6237\u95ee\u9898\n        }\n    ]\n    \n    \n    # Add images to the messages\n    for base64_image in TempArray:\n        messages.append({\n            \"role\": \"user\",\n            \"content\": [\n                {\"type\": \"image_url\", \"image_url\": {\"url\": f\"data:image/jpeg;base64,{base64_image}\"}}\n            ]\n        })\n    print('Test 1', messages)\n\n    # Initialize the OpenAI client with DeepSeek API\n    client = OpenAI(api_key=\"sk-81a62c0f3b614cf2a147f99ecf02ba64\", base_url=\"https://api.deepseek.com\")\n    if node['max_tokens'] >8192:\n        node['max_tokens'] = 8192\n\n    # Make the API call\n    response = client.chat.completions.create(\n        model=\"deepseek-chat\",\n        messages=messages,\n        temperature=node['temperature'],\n        max_tokens=node['max_tokens'],\n        top_p=node['Top_p'],\n        frequency_penalty=node['frequency_penalty'],\n        presence_penalty=node['presence_penalty'],\n        stream=False\n    )\n\n    # Extract the response content\n    Temp = response.choices[0].message.content\n\n    def _strip_code_fences(raw: str) -> str:\n        \"\"\"\u53bb\u6389\u5e38\u89c1 ```json \u2026 ``` \u6216 ``` \u2026 ``` \u4ee3\u7801\u5757\u5305\u88f9\u3002\"\"\"\n        raw = raw.strip()\n        raw = re.sub(r'^```(?:json)?', '', raw, flags=re.I).strip()\n        raw = re.sub(r'```$', '', raw).strip()\n        return raw\n\n    def _find_json_region(raw: str) -> str:\n        \"\"\"\n        \u8fd4\u56de\u539f\u4e32\u4e2d **\u7b2c\u4e00\u4e2a** \u5e73\u8861\u7684\u5927\u62ec\u53f7\u7247\u6bb5\u3002\n        \u53ea\u5728\u201c\u5f15\u53f7\u4e4b\u5916\u201d\u7edf\u8ba1\u62ec\u53f7\u6df1\u5ea6\uff0c\u9632\u6b62\u503c\u91cc\u672c\u8eab\u542b\u6709 { }\u3002\n        \"\"\"\n        raw = _strip_code_fences(raw)\n        first = raw.find('{')\n        if first == -1:\n            raise ValueError('\u672a\u627e\u5230 \"{\"')\n\n        depth = 0\n        in_str = False\n        esc = False\n        for i in range(first, len(raw)):\n            ch = raw[i]\n            if in_str:\n                if esc:\n                    esc = False\n                elif ch == '\\\\':\n                    esc = True\n                elif ch == '\"':\n                    in_str = False\n            else:\n                if ch == '\"':\n                    in_str = True\n                elif ch == '{':\n                    depth += 1\n                elif ch == '}':\n                    depth -= 1\n                    if depth == 0:\n                        return raw[first:i + 1]\n        raise ValueError('\u5927\u62ec\u53f7\u4e0d\u5339\u914d')\n\n    def _escape_newlines_inside_strings(js: str) -> str:\n        \"\"\"\n        JSON \u89c4\u8303\u91cc\u5b57\u7b26\u4e32\u5185\u4e0d\u80fd\u51fa\u73b0\u88f8\u6362\u884c\u7b26\u3002\n        \u628a\u4f4d\u4e8e\u5f15\u53f7\u5185\u90e8\u7684 \\n / \\r \u8f6c\u4e49\u6210 \\\\n\u3002\n        \"\"\"\n        out, in_str, esc = [], False, False\n        for ch in js:\n            if in_str:\n                if esc:\n                    esc = False\n                elif ch == '\\\\':\n                    esc = True\n                elif ch == '\"':\n                    in_str = False\n                elif ch in '\\n\\r':\n                    out.append('\\\\n')\n                    continue\n            else:\n                if ch == '\"':\n                    in_str = True\n            out.append(ch)\n        return ''.join(out)\n\n    def _basic_clean(text: str) -> str:\n        \"\"\"\u53bb\u6389\u63a7\u5236\u5b57\u7b26\u5e76\u505a NFC\u202fUnicode \u5f52\u4e00\u5316\u3002\"\"\"\n        text = unicodedata.normalize('NFC', text)\n        return re.sub(r'[\\x00-\\x08\\x0B\\x0C\\x0E-\\x1F\\x7F]', '', text)\n\n    # ---------- \u5bf9\u5916\u4e3b\u51fd\u6570 ----------\n\n    def string_to_json(input_str: str, indent: int = 4) -> str:\n        \"\"\"\n        \u628a\u6df7\u6742\u5b57\u7b26\u4e32 \u2192 \u683c\u5f0f\u5316 JSON\uff08str\uff09\u3002\n        \u89e3\u6790\u5931\u8d25\u629b\u51fa json.JSONDecodeError / ValueError\uff0c\u4fbf\u4e8e\u4e0a\u5c42\u6355\u83b7\u3002\n        \"\"\"\n        cleaned   = _basic_clean(input_str)\n        json_part = _find_json_region(cleaned)\n        json_part = _escape_newlines_inside_strings(json_part)\n        obj       = json.loads(json_part)         # \u8fd9\u91cc\u5982\u6709\u8bed\u6cd5\u95ee\u9898\u4f1a\u76f4\u63a5\u629b\u9519\n        return json.dumps(obj, ensure_ascii=False, indent=indent)\n    \n    print('Test 1 Temp', Temp)\n    if node['OriginalTextSelector'] == 'Json':\n        Temp_dict = json.loads(string_to_json(Temp))\n        print('Test 2', Temp_dict)\n    \n    index = -1\n    try:\n        if node['OriginalTextSelector'] == 'Json':\n            for key, value in Temp_dict.items():\n                index += 1\n                if Outputs[index]['Kind'] == 'String':\n                    Outputs[index]['Context'] = value\n                elif Outputs[index]['Kind'] == 'Num':\n                    Outputs[index]['Num'] = int(value)\n                elif Outputs[index]['Kind'] == 'Boolean':\n                    Outputs[index]['Boolean'] = value\n        else:\n            Outputs[0]['Context'] = Temp\n        Outputs[0]['prompt_tokens'] = response.usage.prompt_tokens\n        Outputs[0]['completion_tokens'] = response.usage.completion_tokens\n        Outputs[0]['total_tokens'] = response.usage.total_tokens\n    except Exception as e:\n        raise Exception(f\"An error occurred: {e}. Temp_dict: {Temp_dict}\")\n\n    return Outputs","Id":"Input1","IsLabel":false,"Isnecessary":false,"Kind":"String","Link":1,"Num":null,"name":"Input1"}],"Outputs":[{"Boolean":false,"Context":"\u7ec4\u4ef6\u529f\u80fd\uff08\u7b80\u8ff0\u4ee3\u7801\u6574\u4f53\u529f\u80fd\uff09\\n\u8fd9\u662f\u4e00\u4e2aDeepSeek\u5927\u8bed\u8a00\u6a21\u578bAPI\u8c03\u7528\u8282\u70b9\uff0c\u4f5c\u4e3aLLM\u7c7b\u578b\u7ec4\u4ef6\uff0c\u53ef\u4ee5\u52a8\u6001\u521b\u5efa\u8f93\u5165\u8f93\u51fa\u8282\u70b9\uff0c\u652f\u6301\u591a\u6a21\u6001\u5bf9\u8bdd\u548c\u7075\u6d3b\u7684\u53c2\u6570\u914d\u7f6e\u3002\\n\\n\u4ee3\u7801\u529f\u80fd\u6458\u8981\uff08\u6982\u62ec\u6838\u5fc3\u7b97\u6cd5\u6216\u4e3b\u8981\u5904\u7406\u6b65\u9aa4\uff09\\n\u6838\u5fc3\u529f\u80fd\u5305\u62ec\u56fe\u50cfBase64\u7f16\u7801\u5904\u7406\u3001\u591a\u6a21\u6001\u6d88\u606f\u6784\u5efa\u3001DeepSeek API\u8c03\u7528\u3001\u54cd\u5e94\u89e3\u6790\u548cJSON\u683c\u5f0f\u5316\uff0c\u652f\u6301\u6587\u672c\u548c\u56fe\u50cf\u6df7\u5408\u8f93\u5165\uff0c\u63d0\u4f9b\u539f\u59cb\u6587\u672c\u548c\u7ed3\u6784\u5316JSON\u4e24\u79cd\u8f93\u51fa\u6a21\u5f0f\u3002\\n\\n\u53c2\u6570\\n```yaml\\ninputs: []\\noutputs:\\n  - name: OutPut1\\n    type: string\\n    description: \u6a21\u578b\u56de\u590d\u5185\u5bb9\u53catoken\u4f7f\u7528\u7edf\u8ba1\u4fe1\u606f\\n```\\n\\n\u8fd0\u884c\u903b\u8f91\uff08\u7528 - \u5217\u8868\u63cf\u5199\u8be6\u7ec6\u6d41\u7a0b\uff09\\n- \u4f5c\u4e3aLLM\u8282\u70b9\u7c7b\u578b\uff0c\u53ef\u4ee5\u52a8\u6001\u521b\u5efa\u548c\u914d\u7f6e\u8f93\u5165\u8f93\u51fa\u8282\u70b9\\n- \u6e05\u7a7a\u5e76\u91cd\u65b0\u521d\u59cb\u5316\u8f93\u51fa\u6570\u7ec4\uff0c\u6839\u636e\u8282\u70b9\u914d\u7f6e\u66f4\u65b0\u8f93\u51fa\u7ed3\u6784\\n- \u904d\u5386\u8f93\u5165\u8282\u70b9\uff0c\u68c0\u6d4b\u6587\u4ef6\u8def\u5f84\u7c7b\u578b\u8f93\u5165\uff0c\u5c06\u56fe\u50cf\u6587\u4ef6\u8f6c\u6362\u4e3aBase64\u7f16\u7801\u683c\u5f0f\\n- \u6839\u636eOriginalTextSelector\u53c2\u6570\u6784\u5efa\u7cfb\u7edf\u63d0\u793a\u8bcd\uff0c\u51b3\u5b9a\u662f\u5426\u5305\u542bExprotAfterPrompt\u8865\u5145\u6307\u4ee4\\n- \u6784\u5efa\u6d88\u606f\u6570\u7ec4\uff0c\u5305\u542b\u7cfb\u7edf\u89d2\u8272\u63d0\u793a\u8bcd\u548c\u7528\u6237\u89d2\u8272\u7684\u4e3b\u8981\u95ee\u9898\\n- \u5c06Base64\u7f16\u7801\u7684\u56fe\u50cf\u5185\u5bb9\u6dfb\u52a0\u5230\u6d88\u606f\u6570\u7ec4\uff0c\u5b9e\u73b0\u591a\u6a21\u6001\u8f93\u5165\u652f\u6301\\n- \u521d\u59cb\u5316OpenAI\u5ba2\u6237\u7aef\uff0c\u914d\u7f6eDeepSeek API\u5bc6\u94a5\u548c\u57fa\u7840URL\\n- \u9a8c\u8bc1max_tokens\u53c2\u6570\uff0c\u786e\u4fdd\u4e0d\u8d85\u8fc78192\u4e0a\u9650\u503c\\n- \u8c03\u7528DeepSeek\u804a\u5929\u5b8c\u6210API\uff0c\u4f20\u5165\u6240\u6709\u914d\u7f6e\u53c2\u6570\u8fdb\u884c\u63a8\u7406\\n- \u63d0\u53d6API\u54cd\u5e94\u4e2d\u7684\u6587\u672c\u5185\u5bb9\u8fdb\u884c\u540e\u5904\u7406\\n- \u5982\u679c\u9009\u62e9Json\u8f93\u51fa\u683c\u5f0f\uff0c\u6267\u884cJSON\u89e3\u6790\u548c\u683c\u5f0f\u5316\u5904\u7406\\n- \u4f7f\u7528\u591a\u5c42\u6e05\u7406\u51fd\u6570\u5904\u7406\u54cd\u5e94\uff1a\u53bb\u9664\u4ee3\u7801\u5757\u6807\u8bb0\u3001\u63d0\u53d6JSON\u533a\u57df\u3001\u8f6c\u4e49\u6362\u884c\u7b26\u3001\u6e05\u7406\u63a7\u5236\u5b57\u7b26\\n- \u6839\u636e\u8f93\u51fa\u683c\u5f0f\u9009\u62e9\u5206\u914d\u7ed3\u679c\uff1aJson\u6a21\u5f0f\u6309\u952e\u503c\u5bf9\u5206\u914d\u5230\u5bf9\u5e94\u8f93\u51fa\u8282\u70b9\uff0c\u539f\u59cb\u6587\u672c\u6a21\u5f0f\u76f4\u63a5\u8d4b\u503c\\n- \u8bb0\u5f55\u5e76\u8fd4\u56detoken\u4f7f\u7528\u7edf\u8ba1\u4fe1\u606f\uff0c\u5305\u62ec\u63d0\u793a\u8bcdtoken\u6570\u3001\u5b8c\u6210token\u6570\u548c\u603btoken\u6570\\n- \u63d0\u4f9b\u5f02\u5e38\u5904\u7406\u673a\u5236\uff0c\u786e\u4fdd\u8282\u70b9\u8fd0\u884c\u7684\u7a33\u5b9a\u6027","Description":"answer","Id":"Output1","Kind":"String","Link":1,"Num":null,"name":"OriginalText"}],"TempOutPuts":[{"Boolean":false,"Context":null,"Description":"answer","Id":"Output1","Kind":"String","Link":0,"Num":null,"name":"OutPut1"}],"SystemPrompt":"\u4f60\u662f\u4e00\u540d\u4ee3\u7801\u89e3\u91ca\u5458\uff0c\u8bf7\u6839\u636e\u7ed9\u5b9a\u7684 Python\u202f\u8282\u70b9\u4ee3\u7801 \u4e0e  \n\u5176 Inputs / Outputs \u6570\u7ec4\u5185\u5bb9\uff0c\u751f\u6210 FunctionIntroduction\u3002 \n\u751f\u6210\u65f6\u8bf7\u9075\u5faa\u4ee5\u4e0b\u89c4\u5219\uff1a\n\n\u6574\u6bb5\u6587\u672c\u53ea\u7528 \\\\n \u5b57\u7b26\u4e32\u8868\u793a\u6362\u884c\uff0c\u4e0d\u8981\u76f4\u63a5\u6362\u884c\u3002\n\n\u5fc5\u987b\u5305\u542b\u4ee5\u4e0b\u56db\u5927\u6bb5\uff0c\u4e14\u987a\u5e8f\u56fa\u5b9a\uff1a\n\n\u7ec4\u4ef6\u529f\u80fd\uff08\u7b80\u8ff0\u4ee3\u7801\u6574\u4f53\u529f\u80fd\uff09\n\n\u4ee3\u7801\u529f\u80fd\u6458\u8981\uff08\u6982\u62ec\u6838\u5fc3\u7b97\u6cd5\u6216\u4e3b\u8981\u5904\u7406\u6b65\u9aa4\uff09\n\n\u53c2\u6570\uff08YAML\u00a0\u533a\u5757\uff1b\u8be6\u89c1\u683c\u5f0f\u8981\u6c42\uff09\n\n\u8fd0\u884c\u903b\u8f91\uff08\u7528 - \u5217\u8868\u63cf\u5199\u8be6\u7ec6\u6d41\u7a0b\uff09\n\nYAML\u00a0\u533a\u5757\u5b57\u6bb5\u89c4\u8303\uff1a\n\nyaml\n\u590d\u5236\n\u7f16\u8f91\ninputs:\n  - name: <\u4e0e Inputs[i].name \u5bf9\u5e94>\n    type: <string|integer|number|boolean|file>\n    required: <true|false>\n    description: <\u4e00\u53e5\u4e2d\u6587\u8bf4\u660e>\n    default: <\u53ef\u9009\uff0c\u9ed8\u8ba4\u503c>\n    frozen: <\u53ef\u9009\uff0ctrue \u8868\u793a\u56fa\u5b9a\u6b7b\uff0c\u4e0d\u7ed9 LLM \u51b3\u7b56>\noutputs:\n  - name: <Outputs[i].name>\n    type: <string|integer|number|boolean|file>\n    description: <\u4e00\u53e5\u4e2d\u6587\u8bf4\u660e>\n\n\u9664 \\\\n \u4e0e YAML\u00a0\u5916\uff0c\u907f\u514d\u4f7f\u7528\u5176\u4ed6\u683c\u5f0f\u5316\u6807\u8bb0\uff08\u5982\u989d\u5916\u7684 ```\u00a0\u4ee3\u7801\u5757\u6216\u6807\u9898\uff09\u3002\n\n\u6309\u4e0a\u8ff0\u89c4\u8303\u751f\u6210 \u5b8c\u6574\u6587\u672c\uff0c\u6211\u4eec\u5c06\u76f4\u63a5\u5b58\u50a8\u5e76\u89e3\u6790\uff0c\u4efb\u4f55\u683c\u5f0f\u504f\u5dee\u90fd\u4f1a\u5bfc\u81f4\u89e3\u6790\u5931\u8d25\u3002\n\n\u5f3a\u8c03\uff1a\n1.\u5982\u679cNodeKind=='LLm'/'DataBase'/'IfNode'\uff0c\u90a3\u4e48\u5b83\u7684\u8f93\u5165\u8282\u70b9\u8f93\u51fa\u8282\u70b9\u90fd\u662f\u7a7a\uff08output\u5b58\u5728Originaltext),\u4e0d\u8981\u51ed\u7a7a\u634f\u9020\u591a\u4f59\u7684\u8f93\u5165\u8f93\u51fa\u8282\u70b9\uff0c\u4f60\u4ec5\u9700\u8981\u5c06\u91cd\u70b9\u653e\u5728\u4ecb\u7ecd\u8fd9\u6b3e\u6a21\u578b\u7684\u7279\u5355\u5373\u53ef\u3002\u4f60\u53ea\u8981\u8bf4\u660e\u5b83\u4eec\u53ef\u4ee5\u521b\u5efa\u8f93\u5165\u8f93\u51fa\u8282\u70b9\u5373\u53ef\u3002\n\n\n","prompt":"{{Input1}}","ExportPrompt":"import json\nimport re\nimport http.client\nimport base64\nfrom openai import OpenAI\nimport unicodedata\n#**Define the number of outputs and inputs\nOutPutNum = 1\nInPutNum = 0\nFunctionIntroduction='\u7ec4\u4ef6\u529f\u80fd\uff08\u7b80\u8ff0\u4ee3\u7801\u6574\u4f53\u529f\u80fd\uff09\\\\n\u8fd9\u662f\u4e00\u4e2a\u8c03\u7528DeepSeek\u5927\u8bed\u8a00\u6a21\u578bAPI\u7684\u8282\u70b9\u7ec4\u4ef6\uff0c\u652f\u6301\u6587\u672c\u548c\u56fe\u50cf\u6df7\u5408\u8f93\u5165\uff0c\u53ef\u914d\u7f6e\u591a\u79cd\u6a21\u578b\u53c2\u6570\uff0c\u5e76\u63d0\u4f9b\u7075\u6d3b\u7684\u8f93\u51fa\u683c\u5f0f\u9009\u62e9\u3002\\\\n\\\\n\u4ee3\u7801\u529f\u80fd\u6458\u8981\uff08\u6982\u62ec\u6838\u5fc3\u7b97\u6cd5\u6216\u4e3b\u8981\u5904\u7406\u6b65\u9aa4\uff09\\\\n\u6838\u5fc3\u529f\u80fd\u5305\u62ec\u56fe\u50cfBase64\u7f16\u7801\u8f6c\u6362\u3001\u591a\u6a21\u6001\u6d88\u606f\u6784\u5efa\u3001DeepSeek API\u8c03\u7528\u3001\u54cd\u5e94\u5185\u5bb9\u89e3\u6790\u548cJSON\u683c\u5f0f\u5316\u5904\u7406\uff0c\u652f\u6301\u539f\u59cb\u6587\u672c\u548c\u7ed3\u6784\u5316JSON\u4e24\u79cd\u8f93\u51fa\u6a21\u5f0f\u3002\\\\n\\\\n\u53c2\u6570\\\\n```yaml\\\\ninputs:\\\\n  - name: SystemPrompt\\\\n    type: string\\\\n    required: true\\\\n    description: \u7cfb\u7edf\u63d0\u793a\u8bcd\uff0c\u5b9a\u4e49\u6a21\u578b\u7684\u89d2\u8272\u548c\u884c\u4e3a\u89c4\u8303\\\\n  - name: ExportPrompt\\\\n    type: string\\\\n    required: true\\\\n    description: \u7528\u6237\u8f93\u5165\u7684\u4e3b\u8981\u95ee\u9898\u6216\u6307\u4ee4\\\\n  - name: ExprotAfterPrompt\\\\n    type: string\\\\n    required: false\\\\n    description: \u8865\u5145\u63d0\u793a\u8bcd\uff0c\u5728\u7cfb\u7edf\u63d0\u793a\u540e\u8ffd\u52a0\u7684\u6307\u4ee4\\\\n  - name: OriginalTextSelector\\\\n    type: string\\\\n    required: true\\\\n    description: \u8f93\u51fa\u683c\u5f0f\u9009\u62e9\u5668\uff0c\u53ef\u9009\u503c\u4e3aOriginalText\u6216Json\\\\n    default: OriginalText\\\\n  - name: temperature\\\\n    type: number\\\\n    required: false\\\\n    description: \u63a7\u5236\u8f93\u51fa\u968f\u673a\u6027\u7684\u6e29\u5ea6\u53c2\u6570\\\\n    default: 0.7\\\\n  - name: max_tokens\\\\n    type: integer\\\\n    required: false\\\\n    description: \u6700\u5927\u8f93\u51fatoken\u6570\uff0c\u4e0a\u9650\u4e3a8192\\\\n    default: 1024\\\\n  - name: Top_p\\\\n    type: number\\\\n    required: false\\\\n    description: \u6838\u91c7\u6837\u53c2\u6570\uff0c\u63a7\u5236\u8bcd\u6c47\u9009\u62e9\u8303\u56f4\\\\n    default: 0.9\\\\n  - name: frequency_penalty\\\\n    type: number\\\\n    required: false\\\\n    description: \u9891\u7387\u60e9\u7f5a\u53c2\u6570\uff0c\u51cf\u5c11\u91cd\u590d\u5185\u5bb9\\\\n    default: 0.0\\\\n  - name: presence_penalty\\\\n    type: number\\\\n    required: false\\\\n    description: \u5b58\u5728\u60e9\u7f5a\u53c2\u6570\uff0c\u9f13\u52b1\u8bdd\u9898\u591a\u6837\u6027\\\\n    default: 0.0\\\\noutputs:\\\\n  - name: OutPut1\\\\n    type: string\\\\n    description: \u6a21\u578b\u56de\u590d\u5185\u5bb9\u53catoken\u4f7f\u7528\u7edf\u8ba1\u4fe1\u606f\\\\n```\\\\n\\\\n\u8fd0\u884c\u903b\u8f91\uff08\u7528 - \u5217\u8868\u63cf\u5199\u8be6\u7ec6\u6d41\u7a0b\uff09\\\\n- \u521d\u59cb\u5316\u8f93\u51fa\u6570\u7ec4\uff0c\u6e05\u7a7a\u5e76\u91cd\u65b0\u586b\u5145\u8282\u70b9\u7684\u8f93\u51fa\u914d\u7f6e\\\\n- \u904d\u5386\u8f93\u5165\u8282\u70b9\uff0c\u68c0\u6d4b\u6587\u4ef6\u8def\u5f84\u7c7b\u578b\u7684\u8f93\u5165\uff0c\u5c06\u56fe\u50cf\u6587\u4ef6\u8f6c\u6362\u4e3aBase64\u7f16\u7801\u683c\u5f0f\\\\n- \u6839\u636eOriginalTextSelector\u53c2\u6570\u6784\u5efa\u7cfb\u7edf\u63d0\u793a\u8bcd\uff0c\u9009\u62e9\u662f\u5426\u5305\u542bExprotAfterPrompt\\\\n- \u6784\u5efa\u6d88\u606f\u6570\u7ec4\uff0c\u5305\u542b\u7cfb\u7edf\u89d2\u8272\u548c\u7528\u6237\u89d2\u8272\u7684\u6587\u672c\u5185\u5bb9\\\\n- \u5c06Base64\u7f16\u7801\u7684\u56fe\u50cf\u6dfb\u52a0\u5230\u6d88\u606f\u6570\u7ec4\u4e2d\uff0c\u652f\u6301\u591a\u6a21\u6001\u8f93\u5165\\\\n- \u521d\u59cb\u5316OpenAI\u5ba2\u6237\u7aef\uff0c\u914d\u7f6eDeepSeek API\u7684\u5bc6\u94a5\u548c\u57fa\u7840URL\\\\n- \u68c0\u67e5max_tokens\u53c2\u6570\uff0c\u786e\u4fdd\u4e0d\u8d85\u8fc78192\u7684\u4e0a\u9650\\\\n- \u8c03\u7528DeepSeek API\u53d1\u9001\u804a\u5929\u5b8c\u6210\u8bf7\u6c42\uff0c\u4f20\u5165\u6240\u6709\u914d\u7f6e\u53c2\u6570\\\\n- \u63d0\u53d6API\u54cd\u5e94\u4e2d\u7684\u6587\u672c\u5185\u5bb9\\\\n- \u5982\u679c\u8f93\u51fa\u683c\u5f0f\u9009\u62e9\u4e3aJson\uff0c\u5219\u8fdb\u884cJSON\u89e3\u6790\u548c\u683c\u5f0f\u5316\u5904\u7406\\\\n- \u4f7f\u7528\u591a\u5c42\u6e05\u7406\u51fd\u6570\u5904\u7406\u54cd\u5e94\u6587\u672c\uff1a\u53bb\u9664\u4ee3\u7801\u5757\u6807\u8bb0\u3001\u63d0\u53d6JSON\u533a\u57df\u3001\u8f6c\u4e49\u6362\u884c\u7b26\u3001\u6e05\u7406\u63a7\u5236\u5b57\u7b26\\\\n- \u6839\u636e\u8f93\u51fa\u683c\u5f0f\u5206\u914d\u7ed3\u679c\u5230\u5bf9\u5e94\u7684\u8f93\u51fa\u8282\u70b9\uff1aJson\u6a21\u5f0f\u6309\u952e\u503c\u5bf9\u5206\u914d\uff0c\u539f\u59cb\u6587\u672c\u6a21\u5f0f\u76f4\u63a5\u8d4b\u503c\\\\n- \u8bb0\u5f55token\u4f7f\u7528\u7edf\u8ba1\u4fe1\u606f\uff0c\u5305\u62ec\u63d0\u793a\u8bcdtoken\u6570\u3001\u5b8c\u6210token\u6570\u548c\u603btoken\u6570\\\\n- \u8fd4\u56de\u5904\u7406\u5b8c\u6210\u7684\u8f93\u51fa\u6570\u7ec4\uff0c\u5305\u542b\u9519\u8bef\u5904\u7406\u673a\u5236'\n#**Define the number of outputs and inputs\n\n#**Initialize Outputs and Inputs arrays and assign names directly\nOutputs = [{'Num': None, 'Kind': None,'Boolean':False, 'Id': f'Output{i + 1}', 'Context': None,'name':f'OutPut{i + 1}','Link':0,'Description':'answer'} for i in range(OutPutNum)]\nInputs = [{'Num': None, 'Kind': None, 'Id': f'Input{i + 1}', 'Context': None, 'Isnecessary': True,'name':f'Input{i + 1}','Link':0,'IsLabel':False} for i in range(InPutNum)]\n#**Initialize Outputs and Inputs arrays and assign names directly\nNodeKind = 'LLm'\nLable = [{'Id': 'Label1', 'Kind': 'None'}]\n\n#**Assign properties to Inputs\n\nfor output in Outputs:\n    output['Kind'] = 'String'\n\nfor input in Inputs:\n    input['Kind'] = 'String'\n#**Assign properties to Inputs\n\ndef image_to_base64(image_path):\n    with open(image_path, \"rb\") as image_file:\n        encoded_image = base64.b64encode(image_file.read())\n        return encoded_image.decode('utf-8')\n\ndef run_node(node):\n    Outputs.clear()\n    for i in range(len(node['Outputs'])):\n        Outputs.append(node['Outputs'][i])\n    \n    TempArray = []\n    for i in range(len(node['Inputs'])):\n        print('Test 2', node['Inputs'][i]['Kind'])\n        if 'FilePath' in node['Inputs'][i]['Kind']:\n            # Convert image file to Base64 and add to TempArray\n            TempArray.append(image_to_base64(node['Inputs'][i]['Context']))\n    \n    systemPrompt = f\"{node['SystemPrompt']}\\n{node['ExprotAfterPrompt']}\"\n    if node['OriginalTextSelector'] == 'OriginalText': \n        systemPrompt = node['SystemPrompt'] \n    messages = [\n        {\n            \"role\": \"system\",\n            \"content\": systemPrompt\n            # \u5982\u679c ExprotAfterPrompt \u53ea\u662f\u7ed9\u6a21\u578b\u7684\u8865\u5145\u6307\u4ee4\uff0c\u653e\u5728 system \u91cc\u5373\u53ef\uff1b\n            # \u82e5\u5b83\u662f\u8981\u5728\u751f\u6210\u540e\u8ffd\u52a0\u5230\u7b54\u6848\u91cc\u7684\u6a21\u677f\uff0c\u5219\u4e0d\u5e94\u8be5\u5199\u8fdb\u63d0\u793a\uff0c\u800c\u662f\u5728\u5916\u90e8\u62fc\u63a5\u3002\n        },\n        {\n            \"role\": \"user\",\n            \"content\": node['ExportPrompt']          # \u53ea\u653e\u771f\u6b63\u7684\u7528\u6237\u95ee\u9898\n        }\n    ]\n    \n    \n    # Add images to the messages\n    for base64_image in TempArray:\n        messages.append({\n            \"role\": \"user\",\n            \"content\": [\n                {\"type\": \"image_url\", \"image_url\": {\"url\": f\"data:image/jpeg;base64,{base64_image}\"}}\n            ]\n        })\n    print('Test 1', messages)\n\n    # Initialize the OpenAI client with DeepSeek API\n    client = OpenAI(api_key=\"sk-81a62c0f3b614cf2a147f99ecf02ba64\", base_url=\"https://api.deepseek.com\")\n    if node['max_tokens'] >8192:\n        node['max_tokens'] = 8192\n\n    # Make the API call\n    response = client.chat.completions.create(\n        model=\"deepseek-chat\",\n        messages=messages,\n        temperature=node['temperature'],\n        max_tokens=node['max_tokens'],\n        top_p=node['Top_p'],\n        frequency_penalty=node['frequency_penalty'],\n        presence_penalty=node['presence_penalty'],\n        stream=False\n    )\n\n    # Extract the response content\n    Temp = response.choices[0].message.content\n\n    def _strip_code_fences(raw: str) -> str:\n        \"\"\"\u53bb\u6389\u5e38\u89c1 ```json \u2026 ``` \u6216 ``` \u2026 ``` \u4ee3\u7801\u5757\u5305\u88f9\u3002\"\"\"\n        raw = raw.strip()\n        raw = re.sub(r'^```(?:json)?', '', raw, flags=re.I).strip()\n        raw = re.sub(r'```, '', raw).strip()\n        return raw\n\n    def _find_json_region(raw: str) -> str:\n        \"\"\"\n        \u8fd4\u56de\u539f\u4e32\u4e2d **\u7b2c\u4e00\u4e2a** \u5e73\u8861\u7684\u5927\u62ec\u53f7\u7247\u6bb5\u3002\n        \u53ea\u5728\u201c\u5f15\u53f7\u4e4b\u5916\u201d\u7edf\u8ba1\u62ec\u53f7\u6df1\u5ea6\uff0c\u9632\u6b62\u503c\u91cc\u672c\u8eab\u542b\u6709 { }\u3002\n        \"\"\"\n        raw = _strip_code_fences(raw)\n        first = raw.find('{')\n        if first == -1:\n            raise ValueError('\u672a\u627e\u5230 \"{\"')\n\n        depth = 0\n        in_str = False\n        esc = False\n        for i in range(first, len(raw)):\n            ch = raw[i]\n            if in_str:\n                if esc:\n                    esc = False\n                elif ch == '\\\\':\n                    esc = True\n                elif ch == '\"':\n                    in_str = False\n            else:\n                if ch == '\"':\n                    in_str = True\n                elif ch == '{':\n                    depth += 1\n                elif ch == '}':\n                    depth -= 1\n                    if depth == 0:\n                        return raw[first:i + 1]\n        raise ValueError('\u5927\u62ec\u53f7\u4e0d\u5339\u914d')\n\n    def _escape_newlines_inside_strings(js: str) -> str:\n        \"\"\"\n        JSON \u89c4\u8303\u91cc\u5b57\u7b26\u4e32\u5185\u4e0d\u80fd\u51fa\u73b0\u88f8\u6362\u884c\u7b26\u3002\n        \u628a\u4f4d\u4e8e\u5f15\u53f7\u5185\u90e8\u7684 \\n / \\r \u8f6c\u4e49\u6210 \\\\n\u3002\n        \"\"\"\n        out, in_str, esc = [], False, False\n        for ch in js:\n            if in_str:\n                if esc:\n                    esc = False\n                elif ch == '\\\\':\n                    esc = True\n                elif ch == '\"':\n                    in_str = False\n                elif ch in '\\n\\r':\n                    out.append('\\\\n')\n                    continue\n            else:\n                if ch == '\"':\n                    in_str = True\n            out.append(ch)\n        return ''.join(out)\n\n    def _basic_clean(text: str) -> str:\n        \"\"\"\u53bb\u6389\u63a7\u5236\u5b57\u7b26\u5e76\u505a NFC\u202fUnicode \u5f52\u4e00\u5316\u3002\"\"\"\n        text = unicodedata.normalize('NFC', text)\n        return re.sub(r'[\\x00-\\x08\\x0B\\x0C\\x0E-\\x1F\\x7F]', '', text)\n\n    # ---------- \u5bf9\u5916\u4e3b\u51fd\u6570 ----------\n\n    def string_to_json(input_str: str, indent: int = 4) -> str:\n        \"\"\"\n        \u628a\u6df7\u6742\u5b57\u7b26\u4e32 \u2192 \u683c\u5f0f\u5316 JSON\uff08str\uff09\u3002\n        \u89e3\u6790\u5931\u8d25\u629b\u51fa json.JSONDecodeError / ValueError\uff0c\u4fbf\u4e8e\u4e0a\u5c42\u6355\u83b7\u3002\n        \"\"\"\n        cleaned   = _basic_clean(input_str)\n        json_part = _find_json_region(cleaned)\n        json_part = _escape_newlines_inside_strings(json_part)\n        obj       = json.loads(json_part)         # \u8fd9\u91cc\u5982\u6709\u8bed\u6cd5\u95ee\u9898\u4f1a\u76f4\u63a5\u629b\u9519\n        return json.dumps(obj, ensure_ascii=False, indent=indent)\n    \n    print('Test 1 Temp', Temp)\n    if node['OriginalTextSelector'] == 'Json':\n        Temp_dict = json.loads(string_to_json(Temp))\n        print('Test 2', Temp_dict)\n    \n    index = -1\n    try:\n        if node['OriginalTextSelector'] == 'Json':\n            for key, value in Temp_dict.items():\n                index += 1\n                if Outputs[index]['Kind'] == 'String':\n                    Outputs[index]['Context'] = value\n                elif Outputs[index]['Kind'] == 'Num':\n                    Outputs[index]['Num'] = int(value)\n                elif Outputs[index]['Kind'] == 'Boolean':\n                    Outputs[index]['Boolean'] = value\n        else:\n            Outputs[0]['Context'] = Temp\n        Outputs[0]['prompt_tokens'] = response.usage.prompt_tokens\n        Outputs[0]['completion_tokens'] = response.usage.completion_tokens\n        Outputs[0]['total_tokens'] = response.usage.total_tokens\n    except Exception as e:\n        raise Exception(f\"An error occurred: {e}. Temp_dict: {Temp_dict}\")\n\n    return Outputs","ExprotAfterPrompt":"Please ensure the output is in JSON format\n{\n\"Output1\": \"answer\" (you need output type:String)\n}\n","max_tokens":16000,"temperature":0.1,"Top_p":0.9,"OriginalTextSelector":"OriginalText","frequency_penalty":0,"presence_penalty":0,"ReTryNum":0},{"id":"AddIntroduce.py_1748350149320","name":"AddIntroduce.py","label":"AddIntroduce1","x":1150.6875,"y":267.5738644897938,"NodeKind":"Normal","Inputs":[{"Context":"C:\\\\Users\\\\YMXD\\\\Desktop\\\\linkO\\\\linkel\\\\Nodes\\PyArray.py","Id":"Input1","IsLabel":false,"Isnecessary":true,"Kind":"String_FilePath","Link":1,"Num":null,"name":"File_Path"},{"Context":"\u8fd9\u662f\u4e00\u4e2a\u5411\u5de5\u4f5c\u6d41(Workflow)JSON\u6587\u4ef6\u63d2\u5165\u8282\u70b9\u7684\u7a0b\u5e8f\u3002\n\n**\u8f93\u5165\uff1a**\n1. \u6587\u4ef6\u8def\u5f84 - \u76ee\u6807workflow\u7684.json\u6587\u4ef6\u8def\u5f84\n2. \u8282\u70b9Json - \u8981\u63d2\u5165\u7684\u8282\u70b9JSON\u6570\u636e\uff08\u53ef\u4ee5\u662f\u5355\u4e2a\u8282\u70b9\u6216\u5305\u542bnodes\u6570\u7ec4\u7684\u5bf9\u8c61\uff09\n\n\u8282\u70b9Json\u8f93\u5165\u683c\u5f0f\u793a\u4f8b\uff1a\n```json\n{\n  \"id\": \"new_node_1\",\n  \"label\": \"\u65b0\u8282\u70b9\",\n  \"type\": \"custom\",\n  ...\u5176\u4ed6\u8282\u70b9\u5c5e\u6027\n}\n```\n\u6216\u5305\u542b\u591a\u4e2a\u8282\u70b9\u7684\u683c\u5f0f\uff1a\n```json\n{\n  \"nodes\": [\n    {\"id\": \"node1\", \"label\": \"\u8282\u70b91\", ...},\n    {\"id\": \"node2\", \"label\": \"\u8282\u70b92\", ...}\n  ]\n}\n```\n\n**\u8f93\u51fa\uff1a**\n1. \u5904\u7406\u7ed3\u679c - \u64cd\u4f5c\u6210\u529f\u65f6\u663e\u793a\"OK: \u73b0\u6709\u8282\u70b9\u603b\u6570 X\"\uff0c\u5931\u8d25\u65f6\u663e\u793a\u9519\u8bef\u4fe1\u606f\n2. \u8c03\u8bd5\u4fe1\u606f - \u5305\u542b\u6587\u4ef6\u8def\u5f84\u3001\u63d2\u5165\u5185\u5bb9\u9884\u89c8\u3001\u53bb\u91cd\u8bb0\u5f55\u7b49\u8be6\u7ec6\u5904\u7406\u8fc7\u7a0b\n\n**\u4e3b\u8981\u529f\u80fd\uff1a**\n- \u8bfb\u53d6\u73b0\u6709workflow JSON\u6587\u4ef6\u4e2d\u7684nodes\u6570\u7ec4\n- \u89e3\u6790\u8f93\u5165\u7684\u8282\u70b9JSON\u6570\u636e\uff08\u652f\u6301\u4ee3\u7801\u5757\u683c\u5f0f\u548c\u7eafJSON\uff09\n- \u5c06\u65b0\u8282\u70b9\u8ffd\u52a0\u5230\u73b0\u6709nodes\u6570\u7ec4\u672b\u5c3e\n- \u81ea\u52a8\u5904\u7406ID\u548clabel\u91cd\u590d\u51b2\u7a81\uff08\u5728\u91cd\u590d\u9879\u672b\u5c3e\u6dfb\u52a0'*'\u76f4\u5230\u552f\u4e00\uff09\n- \u4fdd\u5b58\u66f4\u65b0\u540e\u7684workflow\u6587\u4ef6\n- \u63d0\u4f9b\u8be6\u7ec6\u7684\u8c03\u8bd5\u4fe1\u606f\u8f93\u51fa\n\n\u8be5\u7a0b\u5e8f\u786e\u4fdd\u63d2\u5165\u8282\u70b9\u540e\uff0c\u6240\u6709\u8282\u70b9\u7684ID\u548clabel\u5728\u5168\u5c40\u8303\u56f4\u5185\u4fdd\u6301\u552f\u4e00\u6027\uff0c\u907f\u514d\u5de5\u4f5c\u6d41\u4e2d\u7684\u547d\u540d\u51b2\u7a81\u3002","Id":"Input2","IsLabel":false,"Isnecessary":true,"Kind":"String","Link":1,"Num":null,"name":"Introduce"}],"Outputs":[{"Boolean":false,"Context":"OK: \u66f4\u65b0\u5b8c\u6210\n\u5220\u9664\u65e7\u8d4b\u503c\uff1a\u7b2c12\u884c\n\u63d2\u5165\u65b0\u8d4b\u503c\uff1a\u7b2c12\u884c","Description":"","Id":"Output1","Kind":"String","Link":0,"Num":null,"name":"Result"}],"prompt":"","ReTryNum":0},{"id":"PyArray.py_1748352995595","name":"PyArray.py","label":"PyArray2","x":229.6875,"y":231.26136450469494,"NodeKind":"ArrayTrigger","Inputs":[{"Context":"C:\\\\Users\\\\YMXD\\\\Desktop\\\\linkO\\\\linkel\\\\Nodes","Id":"Input1","IsLabel":true,"Isnecessary":true,"Kind":"String_FilePath","Link":0,"Num":null,"name":"File_Path"}],"OriginalTextArray":[{"Boolean":false,"Context":null,"Description":"answer","Id":"Output1","Kind":"String","Link":0,"Num":null,"name":"OriginalText"}],"Outputs":[{"Boolean":false,"Context":null,"Description":"","Id":"Output1","Kind":"String","Link":1,"Num":null,"name":"Py_Code"},{"Boolean":false,"Context":null,"Description":"","Id":"Output2","Kind":"String","Link":1,"Num":null,"name":"Py_FilePath"}],"RecursionBehavior":"STOP","ReTryNum":0}],"edges":[{"id":"edge-0.74940391513005111748351180116","source":"DeepSeek.py_1748349147004","target":"AddIntroduce.py_1748350149320","sourceAnchor":1,"targetAnchor":1,"targetAnchorID":"Input2","sourceAnchorID":"Output1"},{"id":"edge-0.63399444617008221748352999920","source":"PyArray.py_1748352995595","target":"DeepSeek.py_1748349147004","sourceAnchor":1,"targetAnchor":0,"targetAnchorID":"Input1","sourceAnchorID":"Output1"},{"id":"edge-0.84889445397335541748353004573","source":"PyArray.py_1748352995595","target":"AddIntroduce.py_1748350149320","sourceAnchor":2,"targetAnchor":0,"targetAnchorID":"Input1","sourceAnchorID":"Output2"}]}